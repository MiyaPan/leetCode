/**
 * 122. 买卖股票的最佳时机 II
 * 给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。
    设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
    注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

    示例 1:
    输入: prices = [7,1,5,3,6,4]
    输出: 7
    解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
         随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
    
    示例 2:
    输入: prices = [1,2,3,4,5]
    输出: 4
    解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
         注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
    
    示例 3:
    输入: prices = [7,6,4,3,1]
    输出: 0
    解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

    提示：
    1 <= prices.length <= 3 * 104
    0 <= prices[i] <= 104

    链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii
*/
// 总结：区别于 121 不能多次交易的：能多次交易的，dp 里就存最值，不能多次交易的就只能存当天的收益，然后用 max 去记录最大值
var maxProfit = function(prices) {
    let n = prices.length;
    let dp = Array(2).fill(null).map(_=> Array(n).fill(0));
    // dp[0] 卖出，dp[1] 买入 - 其实就是对应持有 和 不持有 两种状态
    dp[0][0] = 0;
    dp[1][0] = -prices[0];
    for (let i = 1; i < n; i++) {
        dp[0][i] = Math.max(dp[0][i-1], dp[1][i-1]+prices[i]);
        dp[1][i] = Math.max(dp[1][i-1], dp[0][i-1]-prices[i]);
    }
    return dp[0][n-1];
};
