/**
 * 836. 矩形重叠
 * 矩形以列表 [x1, y1, x2, y2] 的形式表示，其中 (x1, y1) 为左下角的坐标，(x2, y2) 是右上角的坐标。
    如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。
    给出两个矩形，判断它们是否重叠并返回结果。

    示例 1：
    输入：rec1 = [0,0,2,2], rec2 = [1,1,3,3]
    输出：true
    
    示例 2：
    输入：rec1 = [0,0,1,1], rec2 = [1,0,2,1]
    输出：false

    提示：
    两个矩形 rec1 和 rec2 都以含有四个整数的列表的形式给出。
    矩形中的所有坐标都处于 -10^9 和 10^9 之间。
    x 轴默认指向右，y 轴默认指向上。
    你可以仅考虑矩形是正放的情况。

    链接：https://leetcode-cn.com/problems/rectangle-overlap
*/
/**
 * =============================
 * 二刷
*/
var isRectangleOverlap = function(rec1, rec2) {
    // 矩形 2 在 矩形 1 的：
    // 右边：2 的 x1 > 1 的 x2
    // 左边：2 的 x2 < 1 的 x1
    // 上边：2 的 y1 > 1 的 y2
    // 下边：2 的 y2 < 1 的 y1
    // 相等可以！
    // 坑啊，新加的 case，并且 case 告诉我们，如果有一个面积为 0 ，就认为不重叠呢！
    // [-1,0,1,1]
    // [0,-1,0,1]
    if (rec1[0] === rec1[2] || rec1[1] === rec1[3]
        || rec2[0] === rec2[2] || rec2[1] === rec2[3]) {
            return false;
    }
    return !(
        rec2[0] >= rec1[2]
        || rec2[2] <= rec1[0]
        || rec2[1] >= rec1[3]
        || rec2[3] <= rec1[1]
    );
};

/**
 * =============================
 * 一刷
*/
var isRectangleOverlap = function(rec1, rec2) {
    // 在上下左右，不挨着的情况，取反，4 个就够，不用 8 个，1 在 2 上，不就是 2 在 1 下吗，或的条件总能到达
    return !(rec1[1] >= rec2[3]
            || rec1[0] >= rec2[2] 
            || rec1[3] <= rec2[1]
            || rec1[2] <= rec2[0]);
};
