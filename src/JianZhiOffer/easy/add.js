/**
 * 剑指 Offer 65. 不用加减乘除做加法
 * 写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。

    示例:
    输入: a = 1, b = 1
    输出: 2

    提示：
    a, b 均可能是负数或 0
    结果不会溢出 32 位整数

    链接：https://leetcode-cn.com/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof
*/
// TODO: 三刷！
var add = function(a, b) {
    // 不用逐位计算，二进制也可以整个数一起运算，规律和逐位的一样，自己也看出来了
    // 当前位 = a ^ b; // 这里的当前位可以扩展到整个数的范围
    // 进位 = a & b; // 这时候把进位左移 1 就好了，就不用 +carry 那样了
    // 把移位后的 进位结果 当做新的数，再和 "当前位" 继续运算
    // 如果 a b 异或的中间位有进位也没关系，那么 a b 的异或 自然也能记录下来这个进位，再统一都左移就行了
    while (b) {
        // 左移右移的优先级高于位运算
        let c = (a & b) << 1;
        a = a ^ b;
        b = c;
    }
    return a;
};
